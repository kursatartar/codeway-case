stages:
  - build
  - deploy
 
variables:
  DOCKER_REGISTRY: "docker.io"
  IMAGE_NAME: "kursatartar/nodejs-express-mysql"
  HELM_RELEASE_NAME: "chart-case"
  NAMESPACE: "default"
  HELM_CHART_DIR: "./chart-case"
  VALUES_FILE: "./chart-case/values.yml"
  KUBECONFIG: "/Users/kursatartar/.kube/config"  # Kubernetes config dosyasının yolu
  DOCKER_PASSWORD: "Kursat098-"
  DOCKER_USER: "kursatartar"
 
before_script:
  - mkdir -p ~/.kube  # Eğer bu dizin yoksa oluştur
  - echo "$KUBECONFIG_CONTENT" > ~/.kube/config  # GitLab'dan alınan kubeconfig içeriğini buraya yaz
  - chmod 600 ~/.kube/config  # Dosyayı güvenli hale getirin
  - echo "Logging into Docker Hub..."
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin  # Docker Hub'a giriş
 
# Docker imajını oluşturma ve push işlemi
build:
  stage: build
  image: docker:latest  # Docker imajı
  services:
    - docker:dind  # Docker-in-Docker servisini başlatıyoruz
  script:
    - echo "Building Docker image..."
    - docker build -t $DOCKER_REGISTRY/$IMAGE_NAME:$CI_COMMIT_REF_NAME .
    - docker push $DOCKER_REGISTRY/$IMAGE_NAME:$CI_COMMIT_REF_NAME
  only:
    - main  # Bu iş sadece main branch'inde çalışacak
 
# Deploy işlemi - production (main branch)
deploy_main:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache curl
    - curl -fsSL https://get.helm.sh/helm-v3.10.1-linux-amd64.tar.gz | tar -xzv
    - mv linux-amd64/helm /usr/local/bin/helm
    - mkdir -p /root/.kube  # kubeconfig dosyasını oluşturacak dizini oluşturuyoruz
    - echo "$KUBECONFIG" > /root/.kube/config  # GitLab CI ortam değişkenlerinden kubeconfig'i alıp kaydediyoruz
  script:
    - export KUBERNETES_MASTER=https://127.0.0.1:63670
    - echo "Deploying to production (main branch)..."
    - helm upgrade --install $HELM_RELEASE_NAME $HELM_CHART_DIR -f $VALUES_FILE --namespace $NAMESPACE
  only:
    - main
