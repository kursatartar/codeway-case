stages:
  - build
  - deploy

variables:
  DOCKER_REGISTRY: "docker.io"
  IMAGE_NAME: "kursatartar/nodejs-express-mysql"
  HELM_RELEASE_NAME: "chart-case"
  NAMESPACE: "staging"  # Bu staging ortamı olacak, production'a değiştirebilirsiniz
  HELM_CHART_DIR: "./chart-case"  # Helm chart dizini
  VALUES_FILE: "./chart-case/values.yml"  # Helm chart'ı için values dosyası
  KUBERNETES_MASTER: "https://127.0.0.1:63670"  # Minikube veya başka bir Kubernetes master URL'si
  KUBECONFIG: "$HOME/.kube/config"  # kubeconfig dosyanızın yolu

before_script:
  - echo "Logging into Docker Hub..."
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin  # Docker Hub'a giriş

# Docker imajını oluşturma ve push işlemi
build:
  stage: build
  image: docker:latest  # Docker imajı
  services:
    - docker:dind  # Docker-in-Docker servisini başlatıyoruz
  script:
    - echo "Building Docker image..."
    - docker build -t $DOCKER_REGISTRY/$IMAGE_NAME:$CI_COMMIT_REF_NAME .
    - docker push $DOCKER_REGISTRY/$IMAGE_NAME:$CI_COMMIT_REF_NAME
  only:
    - main  # Bu iş sadece main branch'inde çalışacak

# Deploy işlemi - staging ortamına deploy
deploy_staging:
  stage: deploy
  image: google/cloud-sdk:alpine  # Helm ve kubectl için bir base image
  script:
    - echo "Setting up kubectl and Helm"
    - curl https://get.helm.sh/helm-v3.10.1-linux-amd64.tar.gz | tar -xzv
    - mv linux-amd64/helm /usr/local/bin/helm
    - export KUBECONFIG=$HOME/.kube/config  # Kubernetes config dosyasını kullanıyoruz
    - kubectl config use-context minikube  # Minikube ile çalışıyorsak
    - echo "Deploying to staging..."
    - helm upgrade --install $HELM_RELEASE_NAME $HELM_CHART_DIR -f $VALUES_FILE --namespace $NAMESPACE
  only:
    - main  # Sadece main branch'i için deploy yapılacak

# Opsiyonel: Production ortamına deploy (staging'den sonra)
deploy_production:
  stage: deploy
  image: google/cloud-sdk:alpine  # Helm ve kubectl için bir base image
  script:
    - echo "Setting up kubectl and Helm for production"
    - curl https://get.helm.sh/helm-v3.10.1-linux-amd64.tar.gz | tar -xzv
    - mv linux-amd64/helm /usr/local/bin/helm
    - export KUBECONFIG=$HOME/.kube/config
    - kubectl config use-context production  # Production ortamına yönlendirme
    - echo "Deploying to production..."
    - helm upgrade --install $HELM_RELEASE_NAME $HELM_CHART_DIR -f $VALUES_FILE --namespace production
  only:
    - tags  # Bu iş sadece tag'ler (release) için çalışacak
